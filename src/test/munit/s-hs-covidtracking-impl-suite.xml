<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="s-hs-covidtracking-impl-suite.xml" />
	<munit:test name="get:\data:s-hs-covidtracking-config-test" doc:id="62348797-d408-4b11-84e5-bf6c703785f2" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Request to source" doc:id="35b491ca-a3c6-4793-8457-5a15a1e8f398" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="fba336a3-2807-4b32-90e9-b8a37f7d3a48" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json  --- readUrl('classpath://getdatashscovidtrackingconfigtest\mock_payload.dwl')]" mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://getdatashscovidtrackingconfigtest\mock_attributes.dwl')]" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://getdatashscovidtrackingconfigtest\mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="e01b569f-5304-461b-bc1f-65a581306449" >
				<munit:payload value="#[readUrl('classpath://getdatashscovidtrackingconfigtest\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://getdatashscovidtrackingconfigtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://getdatashscovidtrackingconfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to get:\data:s-hs-covidtracking-config" doc:id="28cb4b1c-dc96-4b6a-a80c-10bf93742b58" name="get:\data:s-hs-covidtracking-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="7c4d40aa-fd1d-4ae1-85b1-d360f9b4b2ab" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import getdatashscovidtrackingconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="get:\state\(state):s-hs-covidtracking-config-test" doc:id="e5f2a773-38fa-4b64-b88f-13b7156b8841" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Request to source" doc:id="48fb639d-7233-4ec8-8378-6b9c2ea8863a" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="52b481dc-4968-418d-94ae-6dcee8eb12c8" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json  --- readUrl('classpath://getstatestateshscovidtrackingconfigtest\mock_payload.dwl')]" mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://getstatestateshscovidtrackingconfigtest\mock_attributes.dwl')]" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://getstatestateshscovidtrackingconfigtest\mock_variable_.dwl')]" />
						<munit-tools:variable key="state" value="#[output application/java --- readUrl('classpath://getstatestateshscovidtrackingconfigtest\mock_variable_1.dwl')]" mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="88a979f3-670f-4d6f-a926-58b55e17474d" >
				<munit:payload value="#[readUrl('classpath://getstatestateshscovidtrackingconfigtest\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://getstatestateshscovidtrackingconfigtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://getstatestateshscovidtrackingconfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to get:\state\(state):s-hs-covidtracking-config" doc:id="ed25b67d-9ff5-479e-9a86-76ee3ceff7dd" name="get:\state\(state):s-hs-covidtracking-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="d25cd0b8-fbc2-4160-a29c-e8d0cef058f4" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import getstatestateshscovidtrackingconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="get:\state\(state)\(date):s-hs-covidtracking-config-test" doc:id="da2ded02-1dfc-46d7-938b-904d9a527a3c" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Request to source" doc:id="58081231-a621-4e05-82cc-db731ffed260" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="4bbcab1d-b7cc-4a3f-8f0c-c7466b5521f6" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json  --- readUrl('classpath://getstatestatedateshscovidtrackingconfigtest\mock_payload.dwl')]" mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://getstatestatedateshscovidtrackingconfigtest\mock_attributes.dwl')]" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://getstatestatedateshscovidtrackingconfigtest\mock_variable_.dwl')]" />
						<munit-tools:variable key="date" value="#[output application/java --- readUrl('classpath://getstatestatedateshscovidtrackingconfigtest\mock_variable_1.dwl')]" mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="state" value="#[output application/java --- readUrl('classpath://getstatestatedateshscovidtrackingconfigtest\mock_variable_2.dwl')]" mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="d2b373c5-4bbf-4098-98d9-bee8caded39c" >
				<munit:payload value="#[readUrl('classpath://getstatestatedateshscovidtrackingconfigtest\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://getstatestatedateshscovidtrackingconfigtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://getstatestatedateshscovidtrackingconfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to get:\state\(state)\(date):s-hs-covidtracking-config" doc:id="09c2e702-95ff-44fd-838b-649f954afde9" name="get:\state\(state)\(date):s-hs-covidtracking-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="a7f67592-5cb6-4a26-a5fb-2f465cdee300" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import getstatestatedateshscovidtrackingconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>


</mule>
